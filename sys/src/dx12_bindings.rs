/* automatically generated by rust-bindgen 0.72.1 */

#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FrameInterpolationSwapchainConfigureKey {
    WAITCALLBACK = 0,
    FRAMEPACINGTUNING = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FrameInterpolationContext {
    _unused: [u8; 0],
}
pub type CreateFiSwapchain = ::std::option::Option<
    unsafe extern "C" fn(
        fiContext: *mut FrameInterpolationContext,
        device: Device,
        gameQueue: CommandQueue,
        swapchain: *mut Swapchain,
    ) -> ErrorCode,
>;
pub type ReleaseFiSwapchain = ::std::option::Option<
    unsafe extern "C" fn(
        fiContext: *mut FrameInterpolationContext,
        outRealSwapchain: *mut Swapchain,
    ) -> ErrorCode,
>;
pub struct Functions {
    __library: ::libloading::Library,
    pub GetScratchMemorySizeDX12: unsafe extern "C" fn(maxContexts: usize) -> usize,
    pub GetDeviceDX12: unsafe extern "C" fn(device: *mut ID3D12Device) -> Device,
    pub GetInterfaceDX12: unsafe extern "C" fn(
        backendInterface: *mut Interface,
        device: Device,
        scratchBuffer: *mut ::std::os::raw::c_void,
        scratchBufferSize: usize,
        maxContexts: usize,
    ) -> ErrorCode,
    pub GetCommandListDX12: unsafe extern "C" fn(cmdList: *mut ID3D12CommandList) -> CommandList,
    pub GetPipelineDX12: unsafe extern "C" fn(pipelineState: *mut ID3D12PipelineState) -> Pipeline,
    pub GetResourceDX12: unsafe extern "C" fn(
        dx12Resource: *const ID3D12Resource,
        ffxResDescription: ResourceDescription,
        ffxResName: *const u16,
        state: ResourceStates,
    ) -> Resource,
    pub LoadPixDll: unsafe extern "C" fn(pixDllPath: *const u16) -> ErrorCode,
    pub GetSurfaceFormatDX12: unsafe extern "C" fn(format: DXGI_FORMAT) -> SurfaceFormat,
    pub GetDX12FormatFromSurfaceFormat:
        unsafe extern "C" fn(surfaceFormat: SurfaceFormat) -> DXGI_FORMAT,
    pub GetResourceDescriptionDX12: unsafe extern "C" fn(
        pResource: *const ID3D12Resource,
        additionalUsages: ResourceUsage,
    ) -> ResourceDescription,
    pub GetCommandQueueDX12:
        unsafe extern "C" fn(pCommandQueue: *mut ID3D12CommandQueue) -> CommandQueue,
    pub GetSwapchainDX12: unsafe extern "C" fn(pSwapchain: *mut IDXGISwapChain4) -> Swapchain,
    pub GetDX12SwapchainPtr: unsafe extern "C" fn(ffxSwapchain: Swapchain) -> *mut IDXGISwapChain4,
    pub ReplaceSwapchainForFrameinterpolationDX12:
        unsafe extern "C" fn(gameQueue: CommandQueue, gameSwapChain: *mut Swapchain) -> ErrorCode,
    pub CreateFrameinterpolationSwapchainDX12: unsafe extern "C" fn(
        desc: *const DXGI_SWAP_CHAIN_DESC,
        queue: *mut ID3D12CommandQueue,
        dxgiFactory: *mut IDXGIFactory,
        outGameSwapChain: *mut Swapchain,
    ) -> ErrorCode,
    pub CreateFrameinterpolationSwapchainForHwndDX12: unsafe extern "C" fn(
        hWnd: HWND,
        desc1: *const DXGI_SWAP_CHAIN_DESC1,
        fullscreenDesc: *const DXGI_SWAP_CHAIN_FULLSCREEN_DESC,
        queue: *mut ID3D12CommandQueue,
        dxgiFactory: *mut IDXGIFactory,
        outGameSwapChain: *mut Swapchain,
    ) -> ErrorCode,
    pub WaitForPresents: unsafe extern "C" fn(gameSwapChain: Swapchain) -> ErrorCode,
    pub RegisterFrameinterpolationUiResourceDX12: unsafe extern "C" fn(
        gameSwapChain: Swapchain,
        uiResource: Resource,
        flags: u32,
    ) -> ErrorCode,
    pub GetFrameinterpolationCommandlistDX12: unsafe extern "C" fn(
        gameSwapChain: Swapchain,
        gameCommandlist: *mut CommandList,
    ) -> ErrorCode,
    pub GetFrameinterpolationTextureDX12:
        unsafe extern "C" fn(gameSwapChain: Swapchain) -> Resource,
    pub SetFrameGenerationConfigToSwapchainDX12:
        unsafe extern "C" fn(config: *const FrameGenerationConfig) -> ErrorCode,
    pub ConfigureFrameInterpolationSwapchainDX12: unsafe extern "C" fn(
        gameSwapChain: Swapchain,
        key: FrameInterpolationSwapchainConfigureKey,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> ErrorCode,
    pub FrameInterpolationSwapchainGetGpuMemoryUsageDX12: unsafe extern "C" fn(
        gameSwapChain: Swapchain,
        vramUsage: *mut EffectMemoryUsage,
    ) -> ErrorCode,
}
impl Functions {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let GetScratchMemorySizeDX12 = __library
            .get(b"ffxGetScratchMemorySizeDX12\0")
            .map(|sym| *sym)?;
        let GetDeviceDX12 = __library.get(b"ffxGetDeviceDX12\0").map(|sym| *sym)?;
        let GetInterfaceDX12 = __library.get(b"ffxGetInterfaceDX12\0").map(|sym| *sym)?;
        let GetCommandListDX12 = __library.get(b"ffxGetCommandListDX12\0").map(|sym| *sym)?;
        let GetPipelineDX12 = __library.get(b"ffxGetPipelineDX12\0").map(|sym| *sym)?;
        let GetResourceDX12 = __library.get(b"ffxGetResourceDX12\0").map(|sym| *sym)?;
        let LoadPixDll = __library.get(b"ffxLoadPixDll\0").map(|sym| *sym)?;
        let GetSurfaceFormatDX12 = __library
            .get(b"ffxGetSurfaceFormatDX12\0")
            .map(|sym| *sym)?;
        let GetDX12FormatFromSurfaceFormat = __library
            .get(b"ffxGetDX12FormatFromSurfaceFormat\0")
            .map(|sym| *sym)?;
        let GetResourceDescriptionDX12 = __library
            .get(b"ffxGetResourceDescriptionDX12\0")
            .map(|sym| *sym)?;
        let GetCommandQueueDX12 = __library.get(b"ffxGetCommandQueueDX12\0").map(|sym| *sym)?;
        let GetSwapchainDX12 = __library.get(b"ffxGetSwapchainDX12\0").map(|sym| *sym)?;
        let GetDX12SwapchainPtr = __library.get(b"ffxGetDX12SwapchainPtr\0").map(|sym| *sym)?;
        let ReplaceSwapchainForFrameinterpolationDX12 = __library
            .get(b"ffxReplaceSwapchainForFrameinterpolationDX12\0")
            .map(|sym| *sym)?;
        let CreateFrameinterpolationSwapchainDX12 = __library
            .get(b"ffxCreateFrameinterpolationSwapchainDX12\0")
            .map(|sym| *sym)?;
        let CreateFrameinterpolationSwapchainForHwndDX12 = __library
            .get(b"ffxCreateFrameinterpolationSwapchainForHwndDX12\0")
            .map(|sym| *sym)?;
        let WaitForPresents = __library.get(b"ffxWaitForPresents\0").map(|sym| *sym)?;
        let RegisterFrameinterpolationUiResourceDX12 = __library
            .get(b"ffxRegisterFrameinterpolationUiResourceDX12\0")
            .map(|sym| *sym)?;
        let GetFrameinterpolationCommandlistDX12 = __library
            .get(b"ffxGetFrameinterpolationCommandlistDX12\0")
            .map(|sym| *sym)?;
        let GetFrameinterpolationTextureDX12 = __library
            .get(b"ffxGetFrameinterpolationTextureDX12\0")
            .map(|sym| *sym)?;
        let SetFrameGenerationConfigToSwapchainDX12 = __library
            .get(b"ffxSetFrameGenerationConfigToSwapchainDX12\0")
            .map(|sym| *sym)?;
        let ConfigureFrameInterpolationSwapchainDX12 = __library
            .get(b"ffxConfigureFrameInterpolationSwapchainDX12\0")
            .map(|sym| *sym)?;
        let FrameInterpolationSwapchainGetGpuMemoryUsageDX12 = __library
            .get(b"ffxFrameInterpolationSwapchainGetGpuMemoryUsageDX12\0")
            .map(|sym| *sym)?;
        Ok(Functions {
            __library,
            GetScratchMemorySizeDX12,
            GetDeviceDX12,
            GetInterfaceDX12,
            GetCommandListDX12,
            GetPipelineDX12,
            GetResourceDX12,
            LoadPixDll,
            GetSurfaceFormatDX12,
            GetDX12FormatFromSurfaceFormat,
            GetResourceDescriptionDX12,
            GetCommandQueueDX12,
            GetSwapchainDX12,
            GetDX12SwapchainPtr,
            ReplaceSwapchainForFrameinterpolationDX12,
            CreateFrameinterpolationSwapchainDX12,
            CreateFrameinterpolationSwapchainForHwndDX12,
            WaitForPresents,
            RegisterFrameinterpolationUiResourceDX12,
            GetFrameinterpolationCommandlistDX12,
            GetFrameinterpolationTextureDX12,
            SetFrameGenerationConfigToSwapchainDX12,
            ConfigureFrameInterpolationSwapchainDX12,
            FrameInterpolationSwapchainGetGpuMemoryUsageDX12,
        })
    }
    #[doc = " Query how much memory is required for the DirectX 12 backend's scratch buffer.\n\n @param [in] maxContexts                 The maximum number of simultaneous effect contexts that will share the backend.\n                                         (Note that some effects contain internal contexts which count towards this maximum)\n\n @returns\n The size (in bytes) of the required scratch memory buffer for the DX12 backend.\n @ingroup DX12Backend"]
    pub unsafe fn GetScratchMemorySizeDX12(&self, maxContexts: usize) -> usize {
        (self.GetScratchMemorySizeDX12)(maxContexts)
    }
    #[doc = " Create a <c><i>FfxDevice</i></c> from a <c><i>ID3D12Device</i></c>.\n\n @param [in] device                      A pointer to the DirectX12 device.\n\n @returns\n An abstract FidelityFX device.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetDeviceDX12(&self, device: *mut ID3D12Device) -> Device {
        (self.GetDeviceDX12)(device)
    }
    #[doc = " Populate an interface with pointers for the DX12 backend.\n\n @param [out] backendInterface           A pointer to a <c><i>FfxInterface</i></c> structure to populate with pointers.\n @param [in] device                      A pointer to the DirectX12 device.\n @param [in] scratchBuffer               A pointer to a buffer of memory which can be used by the DirectX(R)12 backend.\n @param [in] scratchBufferSize           The size (in bytes) of the buffer pointed to by <c><i>scratchBuffer</i></c>.\n @param [in] maxContexts                 The maximum number of simultaneous effect contexts that will share the backend.\n                                         (Note that some effects contain internal contexts which count towards this maximum)\n\n @retval\n FFX_OK                                  The operation completed successfully.\n @retval\n FFX_ERROR_CODE_INVALID_POINTER          The <c><i>interface</i></c> pointer was <c><i>NULL</i></c>.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetInterfaceDX12(
        &self,
        backendInterface: *mut Interface,
        device: Device,
        scratchBuffer: *mut ::std::os::raw::c_void,
        scratchBufferSize: usize,
        maxContexts: usize,
    ) -> ErrorCode {
        (self.GetInterfaceDX12)(
            backendInterface,
            device,
            scratchBuffer,
            scratchBufferSize,
            maxContexts,
        )
    }
    #[doc = " Create a <c><i>FfxCommandList</i></c> from a <c><i>ID3D12CommandList</i></c>.\n\n @param [in] cmdList                     A pointer to the DirectX12 command list.\n\n @returns\n An abstract FidelityFX command list.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetCommandListDX12(&self, cmdList: *mut ID3D12CommandList) -> CommandList {
        (self.GetCommandListDX12)(cmdList)
    }
    #[doc = " Create a <c><i>FfxPipeline</i></c> from a <c><i>ID3D12PipelineState</i></c>.\n\n @param [in] pipelineState               A pointer to the DirectX12 pipeline state.\n\n @returns\n An abstract FidelityFX pipeline.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetPipelineDX12(&self, pipelineState: *mut ID3D12PipelineState) -> Pipeline {
        (self.GetPipelineDX12)(pipelineState)
    }
    #[doc = " Fetch a <c><i>FfxResource</i></c> from a <c><i>GPUResource</i></c>.\n\n @param [in] dx12Resource                A pointer to the DX12 resource.\n @param [in] ffxResDescription           An <c><i>FfxResourceDescription</i></c> for the resource representation.\n @param [in] ffxResName                  (optional) A name string to identify the resource in debug mode.\n @param [in] state                       The state the resource is currently in.\n\n @returns\n An abstract FidelityFX resources.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetResourceDX12(
        &self,
        dx12Resource: *const ID3D12Resource,
        ffxResDescription: ResourceDescription,
        ffxResName: *const u16,
        state: ResourceStates,
    ) -> Resource {
        (self.GetResourceDX12)(dx12Resource, ffxResDescription, ffxResName, state)
    }
    #[doc = " Loads PIX runtime dll to allow SDK calls to show up in Microsoft PIX.\n\n @param [in] pixDllPath                  The path to the DLL to load.\n\n @retval\n FFX_OK                                  The operation completed successfully.\n @retval\n FFX_ERROR_INVALID_PATH                  Could not load the DLL using the provided path.\n @retval\n FFX_ERROR_BACKEND_API_ERROR             Could not get proc addresses for PIXBeginEvent and/or PIXEndEvent\n\n @ingroup DX12Backend"]
    pub unsafe fn LoadPixDll(&self, pixDllPath: *const u16) -> ErrorCode {
        (self.LoadPixDll)(pixDllPath)
    }
    #[doc = " Fetch a <c><i>FfxSurfaceFormat</i></c> from a DXGI_FORMAT.\n\n @param [in] format              The DXGI_FORMAT to convert to <c><i>FfxSurfaceFormat</i></c>.\n\n @returns\n An <c><i>FfxSurfaceFormat</i></c>.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetSurfaceFormatDX12(&self, format: DXGI_FORMAT) -> SurfaceFormat {
        (self.GetSurfaceFormatDX12)(format)
    }
    #[doc = " Fetch a DXGI_FORMAT from a <c><i>FfxSurfaceFormat</i></c>.\n\n @param [in] surfaceFormat       The <c><i>FfxSurfaceFormat</i></c> to convert to DXGI_FORMAT.\n\n @returns\n An DXGI_FORMAT.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetDX12FormatFromSurfaceFormat(
        &self,
        surfaceFormat: SurfaceFormat,
    ) -> DXGI_FORMAT {
        (self.GetDX12FormatFromSurfaceFormat)(surfaceFormat)
    }
    #[doc = " Fetch a <c><i>FfxResourceDescription</i></c> from an existing ID3D12Resource.\n\n @param [in] pResource           The ID3D12Resource resource to create a <c><i>FfxResourceDescription</i></c> for.\n @param [in] additionalUsages    Optional <c><i>FfxResourceUsage</i></c> flags needed for select resource mapping.\n\n @returns\n An <c><i>FfxResourceDescription</i></c>.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetResourceDescriptionDX12(
        &self,
        pResource: *const ID3D12Resource,
        additionalUsages: ResourceUsage,
    ) -> ResourceDescription {
        (self.GetResourceDescriptionDX12)(pResource, additionalUsages)
    }
    #[doc = " Fetch a <c><i>FfxCommandQueue</i></c> from an existing ID3D12CommandQueue.\n\n @param [in] pCommandQueue       The ID3D12CommandQueue to create a <c><i>FfxCommandQueue</i></c> from.\n\n @returns\n An <c><i>FfxCommandQueue</i></c>.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetCommandQueueDX12(
        &self,
        pCommandQueue: *mut ID3D12CommandQueue,
    ) -> CommandQueue {
        (self.GetCommandQueueDX12)(pCommandQueue)
    }
    #[doc = " Fetch a <c><i>FfxSwapchain</i></c> from an existing IDXGISwapChain4.\n\n @param [in] pSwapchain          The IDXGISwapChain4 to create a <c><i>FfxSwapchain</i></c> from.\n\n @returns\n An <c><i>FfxSwapchain</i></c>.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetSwapchainDX12(&self, pSwapchain: *mut IDXGISwapChain4) -> Swapchain {
        (self.GetSwapchainDX12)(pSwapchain)
    }
    #[doc = " Fetch a IDXGISwapChain4 from an existing <c><i>FfxSwapchain</i></c>.\n\n @param [in] ffxSwapchain          The <c><i>FfxSwapchain</i></c> to fetch an IDXGISwapChain4 from.\n\n @returns\n An IDXGISwapChain4 object.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetDX12SwapchainPtr(&self, ffxSwapchain: Swapchain) -> *mut IDXGISwapChain4 {
        (self.GetDX12SwapchainPtr)(ffxSwapchain)
    }
    #[doc = " Replaces the current swapchain with the provided <c><i>FfxSwapchain</i></c>.\n\n @param [in] gameQueue               The <c><i>FfxCommandQueue</i></c> presentation will occur on.\n @param [in] gameSwapChain           The <c><i>FfxSwapchain</i></c> to use for frame interpolation presentation.\n\n @retval\n FFX_OK                              The operation completed successfully.\n @retval\n FFX_ERROR_INVALID_ARGUMENT          One of the parameters is invalid.\n\n @ingroup DX12FrameInterpolation"]
    pub unsafe fn ReplaceSwapchainForFrameinterpolationDX12(
        &self,
        gameQueue: CommandQueue,
        gameSwapChain: *mut Swapchain,
    ) -> ErrorCode {
        (self.ReplaceSwapchainForFrameinterpolationDX12)(gameQueue, gameSwapChain)
    }
    #[doc = " Creates a <c><i>FfxSwapchain</i></c> from passed in parameters.\n\n @param [in] desc                    The DXGI_SWAP_CHAIN_DESC describing the swapchain creation parameters from the calling application.\n @param [in] queue                   The ID3D12CommandQueue to use for frame interpolation presentation.\n @param [in] dxgiFactory             The IDXGIFactory to use for DX12 swapchain creation.\n @param [out] outGameSwapChain       The created <c><i>FfxSwapchain</i></c>.\n\n @retval\n FFX_OK                              The operation completed successfully.\n @retval\n FFX_ERROR_INVALID_ARGUMENT          One of the parameters is invalid.\n FFX_ERROR_OUT_OF_MEMORY             Insufficient memory available to allocate <c><i>FfxSwapchain</i></c> or underlying component.\n\n @ingroup DX12FrameInterpolation"]
    pub unsafe fn CreateFrameinterpolationSwapchainDX12(
        &self,
        desc: *const DXGI_SWAP_CHAIN_DESC,
        queue: *mut ID3D12CommandQueue,
        dxgiFactory: *mut IDXGIFactory,
        outGameSwapChain: *mut Swapchain,
    ) -> ErrorCode {
        (self.CreateFrameinterpolationSwapchainDX12)(desc, queue, dxgiFactory, outGameSwapChain)
    }
    #[doc = " Creates a <c><i>FfxSwapchain</i></c> from passed in parameters.\n\n @param [in] hWnd                    The HWND handle for the calling application.\n @param [in] desc1                   The DXGI_SWAP_CHAIN_DESC1 describing the swapchain creation parameters from the calling application.\n @param [in] fullscreenDesc          The DXGI_SWAP_CHAIN_FULLSCREEN_DESC describing the full screen swapchain creation parameters from the calling application.\n @param [in] queue                   The ID3D12CommandQueue to use for frame interpolation presentation.\n @param [in] dxgiFactory             The IDXGIFactory to use for DX12 swapchain creation.\n @param [out] outGameSwapChain       The created <c><i>FfxSwapchain</i></c>.\n\n @retval\n FFX_OK                              The operation completed successfully.\n @retval\n FFX_ERROR_INVALID_ARGUMENT          One of the parameters is invalid.\n FFX_ERROR_OUT_OF_MEMORY             Insufficient memory available to allocate <c><i>FfxSwapchain</i></c> or underlying component.\n\n @ingroup DX12FrameInterpolation"]
    pub unsafe fn CreateFrameinterpolationSwapchainForHwndDX12(
        &self,
        hWnd: HWND,
        desc1: *const DXGI_SWAP_CHAIN_DESC1,
        fullscreenDesc: *const DXGI_SWAP_CHAIN_FULLSCREEN_DESC,
        queue: *mut ID3D12CommandQueue,
        dxgiFactory: *mut IDXGIFactory,
        outGameSwapChain: *mut Swapchain,
    ) -> ErrorCode {
        (self.CreateFrameinterpolationSwapchainForHwndDX12)(
            hWnd,
            desc1,
            fullscreenDesc,
            queue,
            dxgiFactory,
            outGameSwapChain,
        )
    }
    #[doc = " Waits for the <c><i>FfxSwapchain</i></c> to complete presentation.\n\n @param [in] gameSwapChain           The <c><i>FfxSwapchain</i></c> to wait on.\n\n @retval\n FFX_OK                              The operation completed successfully.\n @retval\n FFX_ERROR_INVALID_ARGUMENT          Could not query the interface for the frame interpolation swap chain.\n\n @ingroup DX12FrameInterpolation"]
    pub unsafe fn WaitForPresents(&self, gameSwapChain: Swapchain) -> ErrorCode {
        (self.WaitForPresents)(gameSwapChain)
    }
    #[doc = " Registers a <c><i>FfxResource</i></c> to use for UI with the provided <c><i>FfxSwapchain</i></c>.\n\n @param [in] gameSwapChain           The <c><i>FfxSwapchain</i></c> to to register the UI resource with.\n @param [in] uiResource              The <c><i>FfxResource</i></c> representing the UI resource.\n @param [in] flags                   A set of <c><i>FfxUiCompositionFlags</i></c>.\n\n @retval\n FFX_OK                              The operation completed successfully.\n @retval\n FFX_ERROR_INVALID_ARGUMENT          Could not query the interface for the frame interpolation swap chain.\n\n @ingroup DX12FrameInterpolation"]
    pub unsafe fn RegisterFrameinterpolationUiResourceDX12(
        &self,
        gameSwapChain: Swapchain,
        uiResource: Resource,
        flags: u32,
    ) -> ErrorCode {
        (self.RegisterFrameinterpolationUiResourceDX12)(gameSwapChain, uiResource, flags)
    }
    #[doc = " Fetches a <c><i>FfxCommandList</i></c> from the <c><i>FfxSwapchain</i></c>.\n\n @param [in] gameSwapChain           The <c><i>FfxSwapchain</i></c> to get a <c><i>FfxCommandList</i></c> from.\n @param [out] gameCommandlist        The <c><i>FfxCommandList</i></c> from the provided <c><i>FfxSwapchain</i></c>.\n\n @retval\n FFX_OK                              The operation completed successfully.\n @retval\n FFX_ERROR_INVALID_ARGUMENT          Could not query the interface for the frame interpolation swap chain.\n\n @ingroup DX12FrameInterpolation"]
    pub unsafe fn GetFrameinterpolationCommandlistDX12(
        &self,
        gameSwapChain: Swapchain,
        gameCommandlist: *mut CommandList,
    ) -> ErrorCode {
        (self.GetFrameinterpolationCommandlistDX12)(gameSwapChain, gameCommandlist)
    }
    #[doc = " Fetches a <c><i>FfxResource</i></c>  representing the backbuffer from the <c><i>FfxSwapchain</i></c>.\n\n @param [in] gameSwapChain           The <c><i>FfxSwapchain</i></c> to get a <c><i>FfxResource</i></c> backbuffer from.\n\n @returns\n An abstract FidelityFX resources for the swapchain backbuffer.\n\n @ingroup DX12FrameInterpolation"]
    pub unsafe fn GetFrameinterpolationTextureDX12(&self, gameSwapChain: Swapchain) -> Resource {
        (self.GetFrameinterpolationTextureDX12)(gameSwapChain)
    }
    #[doc = " Sets a <c><i>FfxFrameGenerationConfig</i></c> to the internal FrameInterpolationSwapChain (in the backend).\n\n @param [in] config                  The <c><i>FfxFrameGenerationConfig</i></c> to set.\n\n @retval\n FFX_OK                              The operation completed successfully.\n @retval\n FFX_ERROR_INVALID_ARGUMENT          Could not query the interface for the frame interpolation swap chain.\n\n @ingroup DX12FrameInterpolation"]
    pub unsafe fn SetFrameGenerationConfigToSwapchainDX12(
        &self,
        config: *const FrameGenerationConfig,
    ) -> ErrorCode {
        (self.SetFrameGenerationConfigToSwapchainDX12)(config)
    }
    #[doc = " Configures <c><i>FfxSwapchain</i></c> via KeyValue API post <c><i>FfxSwapchain</i></c> context creation\n\n @param [in] gameSwapChain           The <c><i>FfxSwapchain</i></c> to configure via KeyValue API\n @param [in] key                     The <c><i>FfxFrameInterpolationSwapchainConfigureKey</i></c> is key\n @param [in] valuePtr                The <c><i><void *></i></c> pointer to value. What this pointer deference to depends on key.\n\n @retval\n FFX_OK                              The operation completed successfully.\n @retval\n FFX_ERROR_INVALID_ARGUMENT          Could not query the interface for the frame interpolation swap chain.\n\n @ingroup DX12FrameInterpolation"]
    pub unsafe fn ConfigureFrameInterpolationSwapchainDX12(
        &self,
        gameSwapChain: Swapchain,
        key: FrameInterpolationSwapchainConfigureKey,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> ErrorCode {
        (self.ConfigureFrameInterpolationSwapchainDX12)(gameSwapChain, key, valuePtr)
    }
    #[doc = " Query how much GPU memory created by <c><i>FfxSwapchain</i></c>. This excludes GPU memory created by DXGI (ie. size of DXGI swapchaim backbuffers).\n\n @param [in] gameSwapChain           The <c><i>FfxSwapchain</i></c> to configure via KeyValue API\n @param [in out] vramUsage           The <c><i>FfxEffectMemoryUsage</i></c> is the GPU memory created by FrameInterpolationSwapchain\n\n @retval\n FFX_OK                              The operation completed successfully.\n @retval\n FFX_ERROR_INVALID_ARGUMENT          Could not query the interface for the frame interpolation swap chain.\n\n @ingroup DX12FrameInterpolation"]
    pub unsafe fn FrameInterpolationSwapchainGetGpuMemoryUsageDX12(
        &self,
        gameSwapChain: Swapchain,
        vramUsage: *mut EffectMemoryUsage,
    ) -> ErrorCode {
        (self.FrameInterpolationSwapchainGetGpuMemoryUsageDX12)(gameSwapChain, vramUsage)
    }
}
