/* automatically generated by rust-bindgen 0.72.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FrameInterpolationContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fsr2Context {
    _unused: [u8; 0],
}
pub type CreateFiSwapchain = ::std::option::Option<
    unsafe extern "C" fn(
        fiContext: *mut FrameInterpolationContext,
        device: Device,
        gameQueue: CommandQueue,
        swapchain: *mut Swapchain,
    ) -> ErrorCode,
>;
pub type ReleaseFiSwapchain = ::std::option::Option<
    unsafe extern "C" fn(
        fiContext: *mut FrameInterpolationContext,
        outRealSwapchain: *mut Swapchain,
    ) -> ErrorCode,
>;
pub struct Functions {
    __library: ::libloading::Library,
    pub GetScratchMemorySizeDX12: unsafe extern "C" fn(maxContexts: usize) -> usize,
    pub GetDeviceDX12: unsafe extern "C" fn(device: *mut ID3D12Device) -> Device,
    pub GetInterfaceDX12: unsafe extern "C" fn(
        backendInterface: *mut Interface,
        device: Device,
        scratchBuffer: *mut ::std::os::raw::c_void,
        scratchBufferSize: usize,
        maxContexts: u32,
    ) -> ErrorCode,
    pub GetCommandListDX12: unsafe extern "C" fn(cmdList: *mut ID3D12CommandList) -> CommandList,
    pub GetResourceDX12: unsafe extern "C" fn(
        dx12Resource: *const ID3D12Resource,
        ffxResDescription: ResourceDescription,
        ffxResName: *mut u16,
        state: ResourceStates,
    ) -> Resource,
    pub GetSurfaceFormatDX12: unsafe extern "C" fn(format: DXGI_FORMAT) -> SurfaceFormat,
    pub GetFfxResourceDescriptionDX12:
        unsafe extern "C" fn(pResource: *mut ID3D12Resource) -> ResourceDescription,
    pub GetCommandQueueDX12:
        unsafe extern "C" fn(pCommandQueue: *mut ID3D12CommandQueue) -> CommandQueue,
    pub GetSwapchainDX12: unsafe extern "C" fn(pSwapchain: *mut IDXGISwapChain4) -> Swapchain,
    pub GetDX12SwapchainPtr: unsafe extern "C" fn(ffxSwapchain: Swapchain) -> *mut IDXGISwapChain4,
    pub ReplaceSwapchainForFrameinterpolationDX12:
        unsafe extern "C" fn(gameQueue: CommandQueue, gameSwapChain: *mut Swapchain) -> ErrorCode,
    pub CreateFrameinterpolationSwapchainDX12: unsafe extern "C" fn(
        desc: *const DXGI_SWAP_CHAIN_DESC,
        queue: *mut ID3D12CommandQueue,
        dxgiFactory: *mut IDXGIFactory,
        outGameSwapChain: *mut Swapchain,
    ) -> ErrorCode,
    pub CreateFrameinterpolationSwapchainForHwndDX12: unsafe extern "C" fn(
        hWnd: HWND,
        desc1: *const DXGI_SWAP_CHAIN_DESC1,
        fullscreenDesc: *const DXGI_SWAP_CHAIN_FULLSCREEN_DESC,
        queue: *mut ID3D12CommandQueue,
        dxgiFactory: *mut IDXGIFactory,
        outGameSwapChain: *mut Swapchain,
    ) -> ErrorCode,
    pub WaitForPresents: unsafe extern "C" fn(gameSwapChain: Swapchain) -> ErrorCode,
    pub RegisterFrameinterpolationUiResourceDX12:
        unsafe extern "C" fn(gameSwapChain: Swapchain, uiResource: Resource) -> ErrorCode,
    pub GetFrameinterpolationCommandlistDX12: unsafe extern "C" fn(
        gameSwapChain: Swapchain,
        gameCommandlist: *mut CommandList,
    ) -> ErrorCode,
    pub GetFrameinterpolationTextureDX12:
        unsafe extern "C" fn(gameSwapChain: Swapchain) -> Resource,
    pub SetFrameGenerationConfigToSwapchainDX12:
        unsafe extern "C" fn(config: *const FrameGenerationConfig) -> ErrorCode,
}
impl Functions {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let GetScratchMemorySizeDX12 = __library
            .get(b"ffxGetScratchMemorySizeDX12\0")
            .map(|sym| *sym)?;
        let GetDeviceDX12 = __library.get(b"ffxGetDeviceDX12\0").map(|sym| *sym)?;
        let GetInterfaceDX12 = __library.get(b"ffxGetInterfaceDX12\0").map(|sym| *sym)?;
        let GetCommandListDX12 = __library.get(b"ffxGetCommandListDX12\0").map(|sym| *sym)?;
        let GetResourceDX12 = __library.get(b"ffxGetResourceDX12\0").map(|sym| *sym)?;
        let GetSurfaceFormatDX12 = __library
            .get(b"ffxGetSurfaceFormatDX12\0")
            .map(|sym| *sym)?;
        let GetFfxResourceDescriptionDX12 = __library
            .get(b"GetFfxResourceDescriptionDX12\0")
            .map(|sym| *sym)?;
        let GetCommandQueueDX12 = __library.get(b"ffxGetCommandQueueDX12\0").map(|sym| *sym)?;
        let GetSwapchainDX12 = __library.get(b"ffxGetSwapchainDX12\0").map(|sym| *sym)?;
        let GetDX12SwapchainPtr = __library.get(b"ffxGetDX12SwapchainPtr\0").map(|sym| *sym)?;
        let ReplaceSwapchainForFrameinterpolationDX12 = __library
            .get(b"ffxReplaceSwapchainForFrameinterpolationDX12\0")
            .map(|sym| *sym)?;
        let CreateFrameinterpolationSwapchainDX12 = __library
            .get(b"ffxCreateFrameinterpolationSwapchainDX12\0")
            .map(|sym| *sym)?;
        let CreateFrameinterpolationSwapchainForHwndDX12 = __library
            .get(b"ffxCreateFrameinterpolationSwapchainForHwndDX12\0")
            .map(|sym| *sym)?;
        let WaitForPresents = __library.get(b"ffxWaitForPresents\0").map(|sym| *sym)?;
        let RegisterFrameinterpolationUiResourceDX12 = __library
            .get(b"ffxRegisterFrameinterpolationUiResourceDX12\0")
            .map(|sym| *sym)?;
        let GetFrameinterpolationCommandlistDX12 = __library
            .get(b"ffxGetFrameinterpolationCommandlistDX12\0")
            .map(|sym| *sym)?;
        let GetFrameinterpolationTextureDX12 = __library
            .get(b"ffxGetFrameinterpolationTextureDX12\0")
            .map(|sym| *sym)?;
        let SetFrameGenerationConfigToSwapchainDX12 = __library
            .get(b"ffxSetFrameGenerationConfigToSwapchainDX12\0")
            .map(|sym| *sym)?;
        Ok(Functions {
            __library,
            GetScratchMemorySizeDX12,
            GetDeviceDX12,
            GetInterfaceDX12,
            GetCommandListDX12,
            GetResourceDX12,
            GetSurfaceFormatDX12,
            GetFfxResourceDescriptionDX12,
            GetCommandQueueDX12,
            GetSwapchainDX12,
            GetDX12SwapchainPtr,
            ReplaceSwapchainForFrameinterpolationDX12,
            CreateFrameinterpolationSwapchainDX12,
            CreateFrameinterpolationSwapchainForHwndDX12,
            WaitForPresents,
            RegisterFrameinterpolationUiResourceDX12,
            GetFrameinterpolationCommandlistDX12,
            GetFrameinterpolationTextureDX12,
            SetFrameGenerationConfigToSwapchainDX12,
        })
    }
    #[doc = " Query how much memory is required for the DirectX 12 backend's scratch buffer.\n\n @param [in] maxContexts                 The maximum number of simultaneous effect contexts that will share the backend.\n                                         (Note that some effects contain internal contexts which count towards this maximum)\n\n @returns\n The size (in bytes) of the required scratch memory buffer for the DX12 backend.\n @ingroup DX12Backend"]
    pub unsafe fn GetScratchMemorySizeDX12(&self, maxContexts: usize) -> usize {
        (self.GetScratchMemorySizeDX12)(maxContexts)
    }
    #[doc = " Create a <c><i>FfxDevice</i></c> from a <c><i>ID3D12Device</i></c>.\n\n @param [in] device                      A pointer to the DirectX12 device.\n\n @returns\n An abstract FidelityFX device.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetDeviceDX12(&self, device: *mut ID3D12Device) -> Device {
        (self.GetDeviceDX12)(device)
    }
    #[doc = " Populate an interface with pointers for the DX12 backend.\n\n @param [out] backendInterface           A pointer to a <c><i>FfxInterface</i></c> structure to populate with pointers.\n @param [in] device                      A pointer to the DirectX12 device.\n @param [in] scratchBuffer               A pointer to a buffer of memory which can be used by the DirectX(R)12 backend.\n @param [in] scratchBufferSize           The size (in bytes) of the buffer pointed to by <c><i>scratchBuffer</i></c>.\n @param [in] maxContexts                 The maximum number of simultaneous effect contexts that will share the backend.\n                                         (Note that some effects contain internal contexts which count towards this maximum)\n\n @retval\n FFX_OK                                  The operation completed successfully.\n @retval\n FFX_ERROR_CODE_INVALID_POINTER          The <c><i>interface</i></c> pointer was <c><i>NULL</i></c>.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetInterfaceDX12(
        &self,
        backendInterface: *mut Interface,
        device: Device,
        scratchBuffer: *mut ::std::os::raw::c_void,
        scratchBufferSize: usize,
        maxContexts: u32,
    ) -> ErrorCode {
        (self.GetInterfaceDX12)(
            backendInterface,
            device,
            scratchBuffer,
            scratchBufferSize,
            maxContexts,
        )
    }
    #[doc = " Create a <c><i>FfxCommandList</i></c> from a <c><i>ID3D12CommandList</i></c>.\n\n @param [in] cmdList                     A pointer to the DirectX12 command list.\n\n @returns\n An abstract FidelityFX command list.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetCommandListDX12(&self, cmdList: *mut ID3D12CommandList) -> CommandList {
        (self.GetCommandListDX12)(cmdList)
    }
    #[doc = " Fetch a <c><i>FfxResource</i></c> from a <c><i>GPUResource</i></c>.\n\n @param [in] dx12Resource                A pointer to the DX12 resource.\n @param [in] ffxResDescription           An <c><i>FfxResourceDescription</i></c> for the resource representation.\n @param [in] ffxResName                  (optional) A name string to identify the resource in debug mode.\n @param [in] state                       The state the resource is currently in.\n\n @returns\n An abstract FidelityFX resources.\n\n @ingroup DX12Backend"]
    pub unsafe fn GetResourceDX12(
        &self,
        dx12Resource: *const ID3D12Resource,
        ffxResDescription: ResourceDescription,
        ffxResName: *mut u16,
        state: ResourceStates,
    ) -> Resource {
        (self.GetResourceDX12)(dx12Resource, ffxResDescription, ffxResName, state)
    }
    pub unsafe fn GetSurfaceFormatDX12(&self, format: DXGI_FORMAT) -> SurfaceFormat {
        (self.GetSurfaceFormatDX12)(format)
    }
    pub unsafe fn GetFfxResourceDescriptionDX12(
        &self,
        pResource: *mut ID3D12Resource,
    ) -> ResourceDescription {
        (self.GetFfxResourceDescriptionDX12)(pResource)
    }
    pub unsafe fn GetCommandQueueDX12(
        &self,
        pCommandQueue: *mut ID3D12CommandQueue,
    ) -> CommandQueue {
        (self.GetCommandQueueDX12)(pCommandQueue)
    }
    pub unsafe fn GetSwapchainDX12(&self, pSwapchain: *mut IDXGISwapChain4) -> Swapchain {
        (self.GetSwapchainDX12)(pSwapchain)
    }
    pub unsafe fn GetDX12SwapchainPtr(&self, ffxSwapchain: Swapchain) -> *mut IDXGISwapChain4 {
        (self.GetDX12SwapchainPtr)(ffxSwapchain)
    }
    pub unsafe fn ReplaceSwapchainForFrameinterpolationDX12(
        &self,
        gameQueue: CommandQueue,
        gameSwapChain: *mut Swapchain,
    ) -> ErrorCode {
        (self.ReplaceSwapchainForFrameinterpolationDX12)(gameQueue, gameSwapChain)
    }
    pub unsafe fn CreateFrameinterpolationSwapchainDX12(
        &self,
        desc: *const DXGI_SWAP_CHAIN_DESC,
        queue: *mut ID3D12CommandQueue,
        dxgiFactory: *mut IDXGIFactory,
        outGameSwapChain: *mut Swapchain,
    ) -> ErrorCode {
        (self.CreateFrameinterpolationSwapchainDX12)(desc, queue, dxgiFactory, outGameSwapChain)
    }
    pub unsafe fn CreateFrameinterpolationSwapchainForHwndDX12(
        &self,
        hWnd: HWND,
        desc1: *const DXGI_SWAP_CHAIN_DESC1,
        fullscreenDesc: *const DXGI_SWAP_CHAIN_FULLSCREEN_DESC,
        queue: *mut ID3D12CommandQueue,
        dxgiFactory: *mut IDXGIFactory,
        outGameSwapChain: *mut Swapchain,
    ) -> ErrorCode {
        (self.CreateFrameinterpolationSwapchainForHwndDX12)(
            hWnd,
            desc1,
            fullscreenDesc,
            queue,
            dxgiFactory,
            outGameSwapChain,
        )
    }
    pub unsafe fn WaitForPresents(&self, gameSwapChain: Swapchain) -> ErrorCode {
        (self.WaitForPresents)(gameSwapChain)
    }
    pub unsafe fn RegisterFrameinterpolationUiResourceDX12(
        &self,
        gameSwapChain: Swapchain,
        uiResource: Resource,
    ) -> ErrorCode {
        (self.RegisterFrameinterpolationUiResourceDX12)(gameSwapChain, uiResource)
    }
    pub unsafe fn GetFrameinterpolationCommandlistDX12(
        &self,
        gameSwapChain: Swapchain,
        gameCommandlist: *mut CommandList,
    ) -> ErrorCode {
        (self.GetFrameinterpolationCommandlistDX12)(gameSwapChain, gameCommandlist)
    }
    pub unsafe fn GetFrameinterpolationTextureDX12(&self, gameSwapChain: Swapchain) -> Resource {
        (self.GetFrameinterpolationTextureDX12)(gameSwapChain)
    }
    pub unsafe fn SetFrameGenerationConfigToSwapchainDX12(
        &self,
        config: *const FrameGenerationConfig,
    ) -> ErrorCode {
        (self.SetFrameGenerationConfigToSwapchainDX12)(config)
    }
}
